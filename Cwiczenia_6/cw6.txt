Wykorzystując bazę danych firma oraz schemat księgowość (stworzone w ramach Ćwiczeń 4) 
wykonaj następujące polecenia: 

a) Zmodyfikuj numer telefonu w tabeli pracownicy, dodając do niego kierunkowy dla 
Polski w nawiasie (+48) 

ALTER TABLE ksiegowosc.pracownicy
    ALTER COLUMN telefon TYPE VARCHAR(20);
UPDATE ksiegowosc.pracownicy
SET telefon = CONCAT('(+48)', telefon);

b) Zmodyfikuj atrybut telefon w tabeli pracownicy tak, aby numer oddzielony był 
myślnikami wg wzoru: ‘555-222-333’ 

UPDATE ksiegowosc.pracownicy
SET telefon =
        CONCAT(
                SUBSTRING(telefon, 1, 8),
                '-',
                SUBSTRING(telefon, 9, 3),
                '-',
                SUBSTRING(telefon, 12, 3)
            );

c) Używając dużych liter, wyświetl dane pracownika, którego nazwisko jest najdłuższe

SELECT UPPER(imie)     AS imie,
       UPPER(nazwisko) AS nazwisko,
       UPPER(adres)    AS adres
FROM ksiegowosc.pracownicy
WHERE LENGTH(nazwisko) = (SELECT LENGTH(nazwisko) AS dlugosc_nazwiska
                          FROM ksiegowosc.pracownicy
                          ORDER BY dlugosc_nazwiska DESC
                          LIMIT 1);

d) Wyświetl dane pracowników i ich pensje zakodowane przy pomocy algorytmu md5

SELECT pracownicy.imie,
       pracownicy.nazwisko,
       pracownicy.adres,
       md5(pensje.kwota::VARCHAR) as pensja
FROM ksiegowosc.pracownicy
         JOIN ksiegowosc.wynagrodzenie
              ON pracownicy.id_pracownika = wynagrodzenie.id_pracownika
         JOIN ksiegowosc.pensje
              ON wynagrodzenie.id_pensji = pensje.id_pensji;

e) Wyświetl pracowników, ich pensje oraz premie. Wykorzystaj złączenie lewostronne. 

SELECT pracownicy.imie,
       pracownicy.nazwisko,
       pracownicy.adres,
       pensje.kwota                             AS pensja,
       premie.kwota                             AS premia,
       pensje.kwota + COALESCE(premie.kwota, 0) AS wynagrodzenie
FROM ksiegowosc.pracownicy
         LEFT JOIN ksiegowosc.wynagrodzenie
                   ON pracownicy.id_pracownika = wynagrodzenie.id_pracownika
         LEFT JOIN ksiegowosc.pensje
                   ON wynagrodzenie.id_pensji = pensje.id_pensji
         LEFT JOIN ksiegowosc.premie
                   ON wynagrodzenie.id_premii = premie.id_premii

f) Wygeneruj raport (zapytanie), które zwróci jako wynik następującą treść dla 
każdego pracownika, według poniższego szablonu:
Pracownik Jan Nowak, w dniu 7.08.2017 otrzymał pensję całkowitą na kwotę 7000 zł, 
gdzie wynagrodzenie zasadnicze wynosiło: 5000 zł, premia: 2000 zł

SELECT CONCAT(
               'Pracownik ',
               pracownik,
               ', w dniu ',
               data,
               ' otrzymał pensję całkowitą na kwotę ',
               wynagrodzenie,
               ', gdzie wynagrodzenie zasadnicze wyniosło: ',
               pensja,
               ' zł, premia: ',
               premia,
               ' zł'
           ) as raport
FROM (SELECT CONCAT(pracownicy.imie,
                    ' ',
                    pracownicy.nazwisko)              as pracownik,
             godziny.data                             as data,
             pensje.kwota                             AS pensja,
             COALESCE(premie.kwota, 0)                AS premia,
             pensje.kwota + COALESCE(premie.kwota, 0) AS wynagrodzenie
      FROM ksiegowosc.pracownicy
               LEFT JOIN ksiegowosc.wynagrodzenie
                         ON pracownicy.id_pracownika = wynagrodzenie.id_pracownika
               LEFT JOIN ksiegowosc.pensje
                         ON wynagrodzenie.id_pensji = pensje.id_pensji
               LEFT JOIN ksiegowosc.premie
                         ON wynagrodzenie.id_premii = premie.id_premii
               LEFT JOIN ksiegowosc.godziny
                         ON wynagrodzenie.id_pracownika = godziny.id_pracownika) AS baza_raportu

Znormalizuj poniższe tabele.
Tabela 1:
CREATE TABLE Lekarze (
    ID VARCHAR(10) PRIMARY KEY,
    Imię VARCHAR(50),
    Nazwisko VARCHAR(50)
);
CREATE TABLE Pacjenci (
    ID VARCHAR(10) PRIMARY KEY,
    Imię VARCHAR(50),
    Nazwisko VARCHAR(50)
);
CREATE TABLE Zabiegi (
    IDZabiegu VARCHAR(10) PRIMARY KEY,
    NazwaZabiegu VARCHAR(100)
);
CREATE TABLE Wizyty (
    IDZabiegu VARCHAR(10),
    IDPacjenta VARCHAR(10),
    IDPracownika VARCHAR(10),
    DataGodzina DATETIME
);
Tabela 2:
CREATE TABLE KodyPocztowe (
    KodPocztowy VARCHAR(10) PRIMARY KEY,
    Miasto VARCHAR(50)
);
CREATE TABLE Producenci (
    IDProducenta INT PRIMARY KEY AUTO_INCREMENT,
    Nazwa VARCHAR(50) UNIQUE,
    Ulica VARCHAR(100),
    KodPocztowy VARCHAR(10)
);
CREATE TABLE Produkty (
    IDProduktu INT PRIMARY KEY AUTO_INCREMENT,
    NazwaProduktu VARCHAR(100),
    Netto FLOAT,
    Brutto FLOAT
);
CREATE TABLE DostawcyProduktow (
    IDProduktu INT,
    IDProducenta INT
);